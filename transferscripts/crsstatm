#!/bin/sh
# Crsstatm (multi-line)
# Created by Seth Miller 2012/06/15
# Version 1.1


# This is a modification of the "crsstat" script widely used to interpret Oracle Clusterware
# "crs_stat" output. This version is written specifically for Oracle Database 11.1 and has
# not yet been tested on any other versions. It displays the crs_stat output in a three column format.


#    Summary of output
# The "ora." is truncated from the resource name 
# The target of the resource will be "X" if it is "ONLINE" and "-" if it is "OFFLINE"
# The state of the resource will be "X <node name>" if it is "ONLINE on <node name>"
# and "-" if it is "OFFLINE"
# An example of the output would be: 
#        ORCL.ORCL1.inst               XX server1
# This should be interpreted as:
# Instance ORCL1 of database ORCL is targeted to be ONLINE and is in an online state on node server1





# Clusterware home directory
CRS_GRID_HOME=${CRS_GRID_HOME:-"/u01/app/crs"}
CRSSTATBIN=$CRS_GRID_HOME/bin/crs_stat
AWK=/usr/bin/awk
LD_LIBRARY_PATH=$ORA_CRS_HOME/lib
# Command line argument to limit output
RSC_KEY=$1
QSTAT=-u

$CRSSTATBIN $QSTAT | $AWK \
'
# Table header

# Start of the BEGIN block
  BEGIN {
    
    # Print the header
    printf "%1$36s%1$53s%1$53s\n", "Target"
    printf "%1$11s%2$22s%3$-20s%1$11s%2$22s%3$-20s%1$11s%2$22s%3$-20s\n", "HA Resource", "|", "State/Location"
    printf "%1$11s%2$22s%3$-20s%1$11s%2$22s%3$-20s%1$11s%2$22s%3$-20s\n", "-----------", "|", "|--------------"

# Table body
    FS="="; PROCSTATE = 0; NUMLINES = 0
  
  }
# End of BEGIN block

# Line Processing block

  # If the first word of the line contains NAME and the second word contains the value of $RSC_KEY then
  $1~/NAME/ && $2~/'$RSC_KEY'/ {

    # truncate "ora." from the front of the resource name
    sub(/ora./,"",$2)

    # assign resource name to the "APPNAME" variable
    APPNAME = $2

    # set PROCSTATE equal to 1 signifying a block has begun and the next line should be the resource target
    PROCSTATE=1

    # increment the NUMLINES variable by 1
    NUMLINES++

  }

  # If the previous line processed was the name of the resource then
  PROCSTATE == 0 {

    # restart the Line Processing Block
    next

  }

  # If the first word of the line contains TARGET and the previous line processed was the name of the resource then
  $1~/TARGET/ && PROCSTATE == 1 {

    # change the word "ONLINE" to "X" anywhere in the value of the resource target
    gsub(/ONLINE/,"X",$2)
    
    # change the word "OFFLINE" to "-" anywhere in the value of the resource target
    gsub(/OFFLINE/,"-",$2)
    
    # assign resource target to the "APPTARGET" variable
    APPTARGET = $2
    
    # set PROCSTATE equal to 2 signifying the next line should be the resource state
    PROCSTATE=2

  }

  # If first word of the line contains STATE and the previous line processed was the target of the resource then
  $1~/STATE/ && PROCSTATE == 2 {
  
    # change the phrase "ONLINE on *" to "X" in the value of the resource state and assign it to the variable "FUN"
    FUN = gensub(/ONLINE on (.*)/,"X \\1","g",$2)
    
    # change the word "OFFLINE" to "-" anywhere in the "FUN" variable
    gsub(/OFFLINE/,"-",FUN)
    
    # assign resource state to the "APPSTATE" variable
    APPSTATE = FUN
    
    # set PROCSTATE equal to 3 signifying the block has ended
    PROCSTATE=3

  }

  # If the block has ended, populate the array with the values captured in the block
  PROCSTATE == 3 {

    # Populate the first subfield of the current array field with the resource name
    NUMFIELDS=1; ARR1[NUMLINES,NUMFIELDS] = APPNAME

    # Populate the second subfield of the current array field with the resource target
    NUMFIELDS++; ARR1[NUMLINES,NUMFIELDS] = APPTARGET

    # Populate the third subfield of the current array field with the resource state
    NUMFIELDS++; ARR1[NUMLINES,NUMFIELDS] = APPSTATE

  }

# Start of the END block
END {
  
  # Column variables have the format COLXe and COLXb
  # meaning column X end and column X begin

  # The end of the first column is the total number of resources to be printed
  # divided by 3 for 3 columns
  # plus 1 to make the first two columns longer than the last in case of an off number of resources
  # truncated to the whole number
  COL1e=int(NUMLINES/3+1)

  # The beginning of the second column is the number of lines in column 1 plus 1
  COL2b=COL1e+1
  
  # The end of the second column is the total of the first two columns minus 1
  COL2e=COL2b+COL1e-1
  
  # The beginning of the third column is the number of lines in columns 1 and 2 plus 1
  COL3b=COL2e+1

  # These lines can be uncommented for debug printing of the column variable assignments
  # print "Column 1 End:", COL1e, "Column 2 Begin:", COL2b, "Column 2 End:", COL2e,
  # "Column 3 Begin:", COL3b, "Total:", NUMLINES

  # Start of the print loop
  # Start with 1 and increment by one until the value of end of column 1 is reached
  for (x=1; x<=COL1e; x++)

    # Print the three column output of the array  
    printf "%-32.30s%1.1s%-20.18s%-32.30s%1.1s%-20.18s%-32.30s%1.1s%s\n",
    ARR1[x,1], ARR1[x,2], ARR1[x,3],
    ARR1[x+COL1e,1], ARR1[x+COL1e,2], ARR1[x+COL1e,3],
    ARR1[x+COL2e,1], ARR1[x+COL2e,2], ARR1[x+COL2e,3]

}
# End of the END block'
